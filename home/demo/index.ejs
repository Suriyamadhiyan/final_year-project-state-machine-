<!DOCTYPE html>
<html lang="en">
<head>
    <title>Air routes</title>
    <meta charset="UTF-8">
    <script src="/assets/vendor/jquery.min.js"></script>
    <script src="/assets/vendor/ga.js"></script>
    <script src="/assets/js/state-machine.js"></script>
    <script src="/assets/js/setup.js"></script>

    <script src="/assets/vendor/TweenMax.min.js"></script>

    <link rel="stylesheet" href="/assets/vendor/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/styles.css">
    <link rel="stylesheet" href="/assets/css/index.css">

    <style type="text/css">
        #map {
            border: 1px solid #CCC;
            width: 960px;
            height: 500px;
            cursor: default;
            position: relative;
            overflow: hidden;
        }

        #map > * {
            position: absolute;
            top: 0;
            left: 0;
        }

        #map .background {
            background-image: url("assets/img/map.svg");
            width: 100%;
            height: 100%;
            opacity: 0.3;
        }

        #map a.city {
            transition: 0.5s all;
            height: 20px;
            position: absolute;
            line-height: 1em;
            margin: 0;
            
        }

        #map a.city[disabled] {
            color: #AAA;
            text-shadow: none;
        }

        #map a.city span {
            position: absolute;
            display: block;
            transform: translate(-50%, -50%);
            margin: 0;
            padding: 0;
            text-align: center;
        }

        #plane {
            position: absolute;
            left: 0;
            top: 0;
            margin-top: -20px;
            margin-left: -20px;
            pointer-events: none;
        }

        #plane .gfx {
            position: absolute;
            top: 0;
            left: 0;
            width: 40px;
            height: 40px;
            display: inline-block;
            background-image: url("assets/img/plane.svg");
        }
        .topnav {
            overflow: hidden;

          }
          
          .topnav a {
            float: left;
            color: #651515;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
            font-size: 18px;
          }
          
          .topnav a:hover {
            background-color: #ddd;
            color: rgba(79, 71, 71, 0.553);
          }
          
          .topnav a.active {
            background-color: #04AA6D;
            color: white;
          }
          .hidden {
			display: none;
		}
          
    </style>
</head>
<body>

    <header>
        <div class="topnav">
            <a class="active" href="#home" <%= home ? '' : 'style="display: none;"' %>>Home</a>
            <% if (input=="true") { %>
                <a href="/input">Input</a>
              <% } %>

            <a id="logout-btn" href="#" <%= logout ? '' : 'style="display: none;"' %>>Logout</a>
          </div>
      </header>
      <br>
      <br>

     
    <h1>Air Routes</h1>
   
    <main class="states">
        <section id="states">
            <div id="map">
                <div class="background"></div>
                <canvas height="498" width="958" id="canvas"></canvas>
                <div id="locations"></div>
                <span id="plane"><span class="gfx"></span></span>
            </div>
        </section>
    </main>
    <script>

        //asking the conformation to logout
        const logoutBtn = document.querySelector('#logout-btn');
        logoutBtn.addEventListener('click', (event) => {
          event.preventDefault();
          const confirmLogout = confirm('Are you sure you want to log out?');
          if (confirmLogout) {
            const logoutForm = document.createElement('form');
            logoutForm.method = 'POST';
            logoutForm.action = '/logout';
            document.body.appendChild(logoutForm);
            logoutForm.submit();
          }
        });
//

 // ------------------------------------------------------------------------------------------------
        // plane
            function Plane(map)
            {
                this.map = map;
                this.pos = $('#plane').get(0);
                this.rot = $('#plane .gfx').get(0);
                this.setPosition(-100, -100);
            }

            Plane.prototype =
            {
                map: null,
                pos: null,
                rot: null,

                x: 0,
                y: 0,
                a: 0,

                setPosition: function (x, y)
                {
                    TweenLite.set(this.pos, {x:x, y:y});
                    this.onUpdate();
                },

                flyTo: function (city, onComplete)
                {
                    // coords
                    var x    = city.x;
                    var y    = city.y;
                    var dx   = x - this.x;
                    var dy   = y - this.y;
                    var dist = Math.sqrt(dx * dx + dy * dy);
                    var a    = Math.atan2(dy, dx) * (180 / Math.PI);

                    // draw
                    this.map.start();

                    // rotate
                    TweenLite.killTweensOf(this.rot);
                    TweenLite.to(this.rot, 0.5, {rotation:a + '_short'});

                    // fly
                    TweenLite.killTweensOf(this.pos);
                    TweenLite.to(this.pos, dist / 200, {x:x, y:y, ease:Power1.easeInOut, delay:0.3, onComplete:onComplete, onUpdate:this.onUpdate.bind(this)})
                },

                onUpdate: function ()
                {
                    this.x = this.pos._gsTransform.x;
                    this.y = this.pos._gsTransform.y;
                    this.map.draw(this.x, this.y);
                }

            };


        // ------------------------------------------------------------------------------------------------
        // trails

            function Map ()
            {
                // elements
                this.canvas = document.getElementById('canvas');
                this.ctx    = this.canvas.getContext('2d');

                // scaling
                //this.ctx.globalCompositeOperation = 'screen';
                this.ctx.imageSmoothingEnabled = true;
                this.ctx.canvas.width       = 960 * 4;
                this.ctx.canvas.height      = 500 * 4;
                this.ctx.scale(0.25, 0.25);
                this.ctx.translate(2, 2);

                // drawing
                this.ctx.strokeStyle = '#e74c3c';
                this.ctx.lineWidth   = 1;
            }

            Map.prototype =
            {
                // canvas
                canvas      : null,
                ctx         : null,

                // variables
                lineState   : true,
                lineLength  : 0,

                start: function ()
                {
                    this.ctx.beginPath();
                },

                end: function ()
                {
                    this.ctx.closePath();
                },

                draw: function (x, y)
                {
                    var ctx = this.ctx;

                    // draw
                    this.lineLength ++;
                    if(this.lineLength > 1)
                    {
                        this.lineLength = 0;
                        this.lineState = ! this.lineState;
                    }
                    this.lineState
                        ? ctx.lineTo(x * 4, y * 4)
                        : ctx.moveTo(x * 4, y * 4);
                    ctx.stroke();
                },

                fade: function ()
                {
                    var ctx = this.ctx;
                    ctx.fillStyle = 'rgba(255, 255, 255, .05)';
                    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                },

                // methods
                clear: function ()
                {
                    var ctx = this.ctx;
                    ctx.save();
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    ctx.restore();
                }

            };


        // ------------------------------------------------------------------------------------------------
        // cities
        let dist_data=null;
        let from_l='none';
        let to_l=null;
        let t_dist=0;
      function hide_dist(ids,id){
          if(ids.indexOf(id) == -1){
              const dist_element = document.getElementsByClassName('.location');
              dist_element[0].style.display = 'none';
          }
      }
  
  
              function Cities (data)
              {
                  // data
                  this.data = data.reduce(function(data, obj) {
                      obj.to = obj.to.split(' ');
                      obj.distance = obj.distance.split(' ');
                      data[obj.id] = obj;
                      return data;
                  }, {});
  
                  // elements
                  this.$el = $('#locations');
              }
  
              Cities.prototype =
              {
                  data: null,
  
                  $el: null,
  
                  get:function(id)
                  {
                      var city = this.data[id];
                      if(!city)
                      {
                          throw new Error('No city named "' +id+ '"');
                      }
                      return city;
                  },
  
                  add: function (id)
                  {
                      var city = this.data[id];
  
                      if(city)
                      {
                          this.draw(city);
                          //print city
                          console.log('current city',city);
                          return city;
                      }
                  },
  
                  update:function (ids)
                  {
                      this.$el.find('a').each(function(i, e)
                      {
                          $(e).attr('disabled', ids.indexOf(e.id) == -1);
                          display_dist(ids);
                      });
  
                  },
  
                  draw:function (city)
                  {
                      // variables
                      var from    = city.id;
                      var label   = from.replace('_', ' ');
                      var x       = city.x;
                      var y       = city.y;
                      const current = data.find(obj => obj.id === from_location);//get the current id tolocation and the distance also
                      const tolocation=current.to;
                      //route_weight(from_location);
                      let index = tolocation.indexOf(from);
                      const dist=current.distance;//get the all the distance of the from route
                      const dist_d=dist[index];//get the current distance of the route
                      var html = '<a href="#" class="city" id="' +from+ '" style="left:' +x+ 'px; top:' +y+ 'px"><span>' +label+ '</span><br><span class="'+from+'"></span></a>';
                      var $city = $(html).hide().fadeIn();
                      this.$el.append($city);
                      console.log('to check the printing time',dist_data);
                      
                      
                  },
  
                  onClick: function (callback)
                  {
                      
                      this.$el.on('click', 'a.city', function(event)
                      {
                          event.preventDefault();
                          callback(event.currentTarget.id);
                          
                      });
                  }
  
              };
              function route_weight(id){   
                const current = data.find(obj => obj.id === id);
                const tolocation=current.to;
                const dist=current.distance;
                if(id!='none'){
                for(let i=0;i < tolocation.length;i++){
                    if(tolocation[i]!=null){
                        const myHeading = document.getElementsByClassName(tolocation[i]);
                        if(myHeading!=null){
                            console.log('found');
                            myHeading[0].textContent = dist[i]+"miles";
                        }
                        else{
                            console.log("Not found");
                        }
                    }
                }
            }
        }
        
              //display and undisplay the distance
              function display_dist(x) {
                var y=[];
                  //it fetch all the available class name of the span tag
                  const spans = document.querySelectorAll('span');
                  for (let i = 0; i < spans.length; i++) {
                    const classList = spans[i].classList;
                    //gets the all span class name and store it in the y array
                    y.push(classList[0]);
                  }
                  y = y.filter(item => item !== undefined && item !== 'gfx');//to clear the un wanted span class names
                  //checks that all the y routes is available in the span class(x array)
                  const allExist = x.every(item => y.includes(item));  
                  if (allExist) {
                      for (let i = 0; i < y.length; i++) {
                          //getts all the individual class name and undisplay that all span distance
                          const un=document.getElementsByClassName(y[i]);
                          if(un!=null){
                              un[0].style.display = "none";
                              un[0].style.fontSize = "10px";
                              un[0].style.color = "#E46878";
                          }
                          
                          
                        }
                          for(var i=0;i< x.length;i++)
                          {
                            const un=document.getElementsByClassName(x[i]);
                            un[0].style.display = "inline"; 
                          }
                  }
              } 

              function get_dist(id){
                var y=[];
                var arr1=[];
                var arr2=[];
                  //it fetch all the available class name of the span tag
                  const spans = document.querySelectorAll('span');
                  for (let i = 0; i < spans.length; i++) {
                    const classList = spans[i].classList;
                    //gets the all span class name and store it in the y array
                    y.push(classList[0]);
                  }
                  y = y.filter(item => item !== undefined && item !== 'gfx');
                //document.addEventListener("DOMContentLoaded", function() {
                for (let i = 0; i < y.length; i++) {
                    const element1 = document.getElementById(id);
                    const element2 = document.getElementById(y[i]);

                    const rect1 = element1.getBoundingClientRect();
                        const rect2 = element2.getBoundingClientRect();
                        
                        const center1 = {
                          x: rect1.left + rect1.width / 2,
                          y: rect1.top + rect1.height / 2
                        };
                        
                        const center2 = {
                          x: rect2.left + rect2.width / 2,
                          y: rect2.top + rect2.height / 2
                        };
                        const dx = center1.x - center2.x;
                        const dy = center1.y - center2.y;
                        
                        const totalDistance = Math.sqrt(dx * dx + dy * dy).toFixed(1);
                        if(y[i]!='none'&&y[i]!=id){
                            //console.log("Total distance between elements: ",id,'to',y[i],':' + totalDistance);
                            arr1.push(totalDistance);//get the distance of the each location
                            //console.warn(arr1);
                            arr2.push(y[i]);//based on the distance get the to location
                            //console.warn(arr2);
                        }
                        
                }  
                if(id!='none')
                {
                        // Create an array of indices based on the sorted order of arr1
                        const sortedIndices = arr1.map((_, i) => i).sort((a, b) => arr1[a] - arr1[b]);

                        // Sort arr1 and apply the same sorting order to arr2
                        const sortedArr1 = arr1.slice().sort((a, b) => a - b);
                        const sortedArr2 = sortedIndices.map((i) => arr2[i]);

                        var sort_dist = sortedArr1.filter((value) => value < 235).sort((a, b) => a - b);
                        var to_location = sortedArr2.slice(0, sort_dist.length);
                        //console.warn(data["to"]);
                        //sort_dist=parseFloat(sort_dist).toString();
                        const current = data.find(obj => obj.id === from_l);
                        current.to=to_location;
                        current.distance=sort_dist;
                        console.log(data);
                        console.log('sorted distance',sort_dist,'sorted location',to_location);
                }
              }

              function total_distance(id){
                if(id!='none'){
                            const current = data.find(obj => obj.id === from_l);
                            to_l=id;
                            const tolocation=current.to;
                            let index = tolocation.indexOf(to_l);
                            const dist=current.distance;
                            if(dist[index]==null){
                            }
                            else{
                            dist_data=dist[index];
                            let intValue = parseInt(dist_data);
                            t_dist +=intValue;//add the distance
                            const set_dist= document.getElementsByClassName("gfx");
                                set_dist[0].textContent = t_dist+"miles";
                                set_dist[0].style.color="olive";
                                set_dist[0].style.fontSize="12px";//display the total distance in html page
                            }
                            from_l=to_l;
                }
        }
        // ------------------------------------------------------------------------------------------------
        // state
            // data                     
            const data1 ='<%= data %>';//getting the data from the db
            const some=JSON.parse(data1.replace(/&#34;/g, '"'));//actually we are getting '&#34;x&#34;:' this instead of 'x:' so that helps to convertto 'x:' like this

            var data = some;//some is having the json data that gets from the db
         
            // variables
            var fsm, map, cities, plane;

            // objects
            map     = new Map();
            plane   = new Plane(map);
            cities  = new Cities(data);
            // click handler
            cities.onClick(function(id){ fsm.do(id);
             });
             let from_location=null;//sample

            // state machine
            fsm = new StateMachine({

                invalid: true,

                initial: 'none',

                transitions: [
                    // no transitions to start with!
                ],

                handlers:
                {
                    // when a state is added to the FSM, add a city on the map
                    'state.add': function (event, fsm)
                    {
                        var to = event.target;
                        console.warn('State added  : ', to);
                        cities.add(to);
                        console.log('Added city   : ', to);

                    },

                    // when an action starts, pause the FSM and animate the plane
                    ':start': function (event, fsm)
                    {
                        // get city
                        var city = cities.get(event.transition.to);

                        // pause transition and fly there
                        fsm.pause();
                        plane.flyTo(city, this.onTransitionComplete.bind(this));
                    },


                    'change': function (event, fsm)
                    {
                        // variables
                        var id      = fsm.state;
                        var city    = cities.get(id);
                        //get_dist(id);
                        total_distance(id);
                        
                        get_dist(id);
                       route_weight(id);
                        // debug
                        console.info('state change :', id);

                        // add connections if not yet added
                        if(city && !city.added && city.to.length)
                        {
                            fsm.addConnections(city);
                            city.added = true;
                        }

                        // update the UI
                        cities.update(fsm.transitions.getStatesFrom(id));
                    }
                },

                methods:
                {
                    // once animation has completed, resume state machine
                    onTransitionComplete: function()
                    {
                        map.end();
                        this.resume();
                    },

                    // when a city has been added, add all its connections (expressed as transitions)
                    
                    addConnections: function (city)
                    {
                        // variables
                        var from = city.id;
                        from_location=from;
                        // loop over connected cities and add transitions
                        console.group('Adding connected cities...');
                        city.to.forEach(function(to)
                        {
                            if(!this.transitions.hasTransition(to, from, to))
                            {
                                console.log('Adding trans : ', from, ' > ', to);
                                this.add(to, from, to);
                               
                            }
                        }.bind(this));
                        console.groupEnd();
                    }

                }

            });            
            //fsm.do('London');
            //fsm.add('London','London','London');
            
           
    </script>


    <script>
        if (window.parent !== window || location.search === '?embed=1') {
            const $map = $('#map')
            $('html, body')
                .css('overflow', 'hidden')

            $('body')
                .css('margin', 0)
                .addClass('embedded')
                .append($map)

            $(window)
                .on('resize', function resize () {
                    $map.css('zoom', window.innerWidth / 960)
                })
                .trigger('resize')
        }
    </script>

    <style>
        body.embedded h1,
        body.embedded #toc,
        body.embedded #home,
        body.embedded .states {
            display: none;
        }
        body.embedded #map {
            border: 0;
        }
    </style>

</body>
</html>
